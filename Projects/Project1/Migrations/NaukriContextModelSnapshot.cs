// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.Models;

#nullable disable

namespace Project1.Migrations
{
    [DbContext(typeof(NaukriContext))]
    partial class NaukriContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompanyCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyCreateId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyModifyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompanymodifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("PlanId");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("Project1.Models.Educationdegree", b =>
                {
                    b.Property<int>("EducationdegreeId")
                        .HasColumnType("int");

                    b.Property<int>("EducationdegreeEndYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationdegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationdegreeStartYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationdegreeUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Educationdegreemarks")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("EducationdegreeId");

                    b.ToTable("educationdegrees");
                });

            modelBuilder.Entity("Project1.Models.Educationhsc", b =>
                {
                    b.Property<int>("EducationhscId")
                        .HasColumnType("int");

                    b.Property<int>("EducationhscEndYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationhscName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationhscStartYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationhscUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Educationhscmarks")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("EducationhscId");

                    b.ToTable("educationhscs");
                });

            modelBuilder.Entity("Project1.Models.Educationssc", b =>
                {
                    b.Property<int>("EducationsscId")
                        .HasColumnType("int");

                    b.Property<int>("EducationsscEndYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationsscName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationsscStartYear")
                        .HasColumnType("int");

                    b.Property<string>("EducationsscUniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Educationsscmarks")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("EducationsscId");

                    b.ToTable("educationsscs");
                });

            modelBuilder.Entity("Project1.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("JobContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JobCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobCreateId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobHrName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobModifyId")
                        .HasColumnType("int");

                    b.Property<bool>("JobStatus")
                        .HasColumnType("bit");

                    b.Property<int>("JobVacany")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JobmodifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Project1.Models.Jobapply", b =>
                {
                    b.Property<int>("JobapplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobapplyId"));

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JobapplyId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobsApply");
                });

            modelBuilder.Entity("Project1.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<int>("PlanAmount")
                        .HasColumnType("int");

                    b.Property<int>("PlanCv")
                        .HasColumnType("int");

                    b.Property<int>("PlanDays")
                        .HasColumnType("int");

                    b.Property<int>("PlanEmails")
                        .HasColumnType("int");

                    b.HasKey("PlanId");

                    b.ToTable("plans");
                });

            modelBuilder.Entity("Project1.Models.Role", b =>
                {
                    b.Property<int>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Roleid"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Roleid");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Project1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreateId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UsermodifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project1.Models.UserCompanyExperience", b =>
                {
                    b.Property<int>("UserCompanyExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCompanyExperienceId"));

                    b.Property<string>("UserCompanyExperienceCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCompanyExperienceMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCompanyExperienceYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCompanyExperiencedesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCompanyExperiencejobprofile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserCompanyExperiencejoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("UserCompanyExperienceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserCompanyExperiences");
                });

            modelBuilder.Entity("Project1.Models.UserLocation", b =>
                {
                    b.Property<int>("UserLocationId")
                        .HasColumnType("int");

                    b.Property<string>("UserLocationCityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLocationCountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLocationStateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("UserLocationId");

                    b.ToTable("userLocations");
                });

            modelBuilder.Entity("Project1.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("EducationdegreeId")
                        .HasColumnType("int");

                    b.Property<int>("EducationhscId")
                        .HasColumnType("int");

                    b.Property<int>("EducationsscId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserLocationId")
                        .HasColumnType("int");

                    b.Property<string>("UserProfileResume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProfileskills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Project1.Models.UserProject", b =>
                {
                    b.Property<int>("UserProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProjectId"));

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UserProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProjectRole")
                        .HasColumnType("int");

                    b.Property<string>("UserProjectRoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProjectSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProjectId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("userProjects");
                });

            modelBuilder.Entity("Project1.Models.Company", b =>
                {
                    b.HasOne("Project1.Models.Plan", "Plans")
                        .WithMany("companies")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Project1.Models.Educationdegree", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", "UserProfiles")
                        .WithOne("educationdegrees")
                        .HasForeignKey("Project1.Models.Educationdegree", "EducationdegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Project1.Models.Educationhsc", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", "UserProfiles")
                        .WithOne("educationhscs")
                        .HasForeignKey("Project1.Models.Educationhsc", "EducationhscId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Project1.Models.Educationssc", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", "UserProfiles")
                        .WithOne("educationsscs")
                        .HasForeignKey("Project1.Models.Educationssc", "EducationsscId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Project1.Models.Job", b =>
                {
                    b.HasOne("Project1.Models.Company", "Company")
                        .WithMany("jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Project1.Models.Jobapply", b =>
                {
                    b.HasOne("Project1.Models.Job", "Jobs")
                        .WithMany("jobapplies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.Models.User", "Users")
                        .WithMany("jobapplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project1.Models.User", b =>
                {
                    b.HasOne("Project1.Models.Role", "Roles")
                        .WithMany("users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Project1.Models.UserCompanyExperience", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", null)
                        .WithMany("userCompanyExperiences")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Project1.Models.UserLocation", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", "UserProfiles")
                        .WithOne("userLocations")
                        .HasForeignKey("Project1.Models.UserLocation", "UserLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Project1.Models.UserProfile", b =>
                {
                    b.HasOne("Project1.Models.User", "Users")
                        .WithOne("UserProfiles")
                        .HasForeignKey("Project1.Models.UserProfile", "UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project1.Models.UserProject", b =>
                {
                    b.HasOne("Project1.Models.UserProfile", null)
                        .WithMany("userProjects")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Project1.Models.Company", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("Project1.Models.Job", b =>
                {
                    b.Navigation("jobapplies");
                });

            modelBuilder.Entity("Project1.Models.Plan", b =>
                {
                    b.Navigation("companies");
                });

            modelBuilder.Entity("Project1.Models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Project1.Models.User", b =>
                {
                    b.Navigation("UserProfiles")
                        .IsRequired();

                    b.Navigation("jobapplies");
                });

            modelBuilder.Entity("Project1.Models.UserProfile", b =>
                {
                    b.Navigation("educationdegrees");

                    b.Navigation("educationhscs");

                    b.Navigation("educationsscs");

                    b.Navigation("userCompanyExperiences");

                    b.Navigation("userLocations")
                        .IsRequired();

                    b.Navigation("userProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
